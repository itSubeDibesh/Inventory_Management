{{>layout/bodyHead}}
<div class="col-md-12">
    <div class="card">
        <div class="card-header">
            <h5>{{Action}} Sales Bill</h5>
            <div class="card-header-right">
                <ul class="list-unstyled card-option">
                    <li><i class="fa fa fa-wrench open-card-option"></i></li>
                    <li><i class="fa fa-window-maximize full-card"></i></li>
                    <li><i class="fa fa-minus minimize-card"></i></li>
                </ul>
            </div>
        </div>
        <div class="card-block">
            <h4 class="sub-title">Please Fill The Form WiselyðŸ˜€ðŸ˜€!!</h4>
            <form>
                <div class="form-group row">
                    <div class="col-md-4">
                        <strong>Date :</strong> {{todayDate}}
                        <br>
                        <strong>Invoice Number:</strong> {{newInvoiceNumber}}
                    </div>
                    <div class="col-md-8">
                        <img class="img-fluid" style="width: 30%; height: auto;" src="/images/icons/blackWalmart.png"
                             alt="Theme-Logo"/>
                    </div>
                </div>
                <hr>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Select Customer Details</label>
                    <div class="col-sm-10">
                        <select name="customerId" id="customerId" class="form-control" required>
                            <option disabled>Select a customer</option>
                        </select>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-sm-2 col-form-label">Select Products</div>
                    <div class="col-sm-10">
                        <table class="table table-dark">
                            <thead class="bg-dark text-light">
                            <tr class="text-center">
                                <th>Product</th>
                                <th>Quantity</th>
                                <th></th>
                            </tr>
                            </thead>
                            <tbody class="text-dark">
                            <tr>
                                <td><select id="addProductId" class="form-control form-control-md">
                                    <option selected disabled id="default">Select Product</option>
                                </select></td>
                                <td><input id="addQuantity" type="number" class="form-control  form-control-md"></td>
                                <td class="mt-2">
                                    <button id="addProductBtn" type="button"
                                            class="btn btn-primary btn-md badge badge-pill"><i
                                            class="fas fa-plus"></i></button>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                        <table class="table table-dark">
                            <tbody class="text-light" id="cartsDataset">
                            </tbody>
                        </table>
                        <hr>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Taxable Amount</label>
                    <div class="col-sm-10">
                        <div class="row">
                            <div class="col-sm-10">
                                <input type="number" disabled name="total" id="total" class="form-control">
                            </div>
                            <div class="col-sm-2">
                                <button class="btn btn-success" type="button" id="calculateResult"><i
                                        class="fas fa-calculator"></i> Calculate
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">13% Vat Amount</label>
                    <div class="col-sm-10">
                        <input type="number" disabled name="taxAmount" id="taxAmount" class="form-control">
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Grand Total</label>
                    <div class="col-sm-10">
                        <input type="number" disabled name="grandTotal" id="grandTotal" class="form-control">
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Amount Received</label>
                    <div class="col-sm-10">
                        <input type="number" name="received" required id="received" class="form-control">
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-form-label">Return Amount</label>
                    <div class="col-sm-10">
                        <div class="row">
                            <div class="col-sm-10">
                                <input type="number" disabled name="return" id="return" class="form-control">
                            </div>
                            <div class="col-sm-2">
                                <button class="btn btn-primary" type="button" id="calculateReturn"><i
                                        class="fas fa-calculator"></i> Calculate
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-12 text-center">
                        <button class="btn btn-success m-2" type="button" id="submitSalesBill"><i
                                class="fas fa-edit"></i> Save
                        </button>
                        <button onclick="resetAll()" class="btn btn-danger m-2" type="reset"><i
                                class="fas fa-redo"></i> Clear
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
{{>layout/bodyFooter}}
<script type="text/javascript" src="/js/common-pages.js"></script>
<script>
    let carts = [];
    let products = [];
    let totalSum = 0;
    let taxAmount = 0;
    let returnAmount = 0;
    let receivedAmount = 0;
    let grandTotal = 0;

    const submitButton = document.getElementById("submitSalesBill");
    const customerId = document.getElementById("customerId");

    const addProductId = document.getElementById("addProductId"),
            addQuantity = document.getElementById("addQuantity"),
            addProductBtn = document.getElementById("addProductBtn");

    const cardBody = document.getElementById("cartsDataset");

    const calculateResult = document.getElementById("calculateResult");
    const calculateReturn = document.getElementById("calculateReturn");

    const receivedAmountId = document.getElementById("received");
    const returnedAmountId = document.getElementById("return");

    /**
     * Appends Card to Dom
     */
    function appendCard() {
        cardBody.innerHTML = null;
        carts.forEach(item => {
            cardBody.innerHTML += `
                                <tr id="Cart_${item.cartsIndex}">
                                    <td>Product: ${item.productId.productId.productName}</td>
                                    <td>Price: Rs ${item.productId.sellingPrice}/- </td>
                                    <td>QTY: ${item.quantity}</td>
                                    <td>Total: ${item.total}</td>
                                     <td class="mt-2">
                                        <button onclick="removeCart(this)" type="button" class="btn btn-danger btn-md badge badge-pill"><i
                                                class="fas fa-trash"></i>
                                        </button>
                                     <td>
                                <tr>
                                `;
        })
    }

    /**
     * Add to Cart
     */
    function addToCart() {
        let productId = findProductAndCart(parseInt(addProductId.value)),
                quantity = parseFloat(addQuantity.value);
        if (quantity > 0 && productId.availableQuantity >= quantity) {
            carts.push({
                cartsIndex: carts.length + 1,
                productId,
                quantity,
                total: (parseFloat(productId.sellingPrice) * quantity)
            })
            addQuantity.value = null;
            document.getElementById("default").selected = "true";
            appendCard();
            calculateTotal();
        } else notify("Error", "Invalid Quantity Entered", null, "bg-danger")
    }

    /**
     * Returns Selected Product or Carts
     * Default Products option Cart
     */
    function findProductAndCart(id, type = "Products",) {
        let dataset = {};
        if (type == "Products") {
            for (let i = 0; i < products.length; i++) {
                if (products[i].id == id) dataset = products[i];
            }
        }
        if (type == "Cart") {
            for (let i = 0; i < carts.length; i++) {
                if (carts[i].cartsIndex == id) {
                    dataset = carts[i];
                    dataset.index = i;
                }
            }
        }
        return dataset.length != 0 ? dataset : null;
    }

    /**
     * Trigger Add to Cart;
     */
    addProductBtn.addEventListener("click", addToCart);

    /**
     * Remove Cart form Dom
     */
    function removeCart(e) {
        const parent = e.parentElement.parentElement;
        carts.splice(findProductAndCart(parent.id.split("_")[1], "Cart").index, 1);
        parent.remove()
        calculateTotal();
    }

    /**
     * Reset All Items
     * */
    function resetAll() {
        cardBody.innerHTML = null;
        document.getElementById("default").selected = "true";
        document.getElementById("total").value = null;
        document.getElementById("taxAmount").value = null;
        document.getElementById("received").value = null;
        document.getElementById("grandTotal").value = null;
        document.getElementById("return").value = null;
        carts = [];
        totalSum = 0;
        returnAmount = 0;
        receivedAmount = 0;
        taxAmount = 0;
        grandTotal = 0;
    }

    /**
     * Calculates Total
     * */
    function calculateTotal() {
        const total = document.getElementById("total")
        total.value = null;
        totalSum = 0;
        if (carts.length != 0) {
            carts.forEach(cart => totalSum += cart.total);
            total.value = totalSum;
            getTaxAmount();
        }
    }

    calculateResult.addEventListener("click", calculateTotal);

    /**
     * Calculate Taxable Amount
     * */
    function getTaxAmount() {
        const vatPercentage = 0.13;
        taxAmount = 0;
        grandTotal = 0;
        taxAmount = vatPercentage * totalSum;
        grandTotal = totalSum + taxAmount;
        document.getElementById("taxAmount").value = taxAmount;
        document.getElementById("grandTotal").value = grandTotal;
    }

    /***
     * Calculate Returned Amount
     * */
    function calculateReturnValue() {
        returnAmount = 0;
        receivedAmount = 0;
        if (receivedAmountId.value != null && receivedAmountId.value > 0) {
            receivedAmount = parseFloat(receivedAmountId.value);
            returnAmount = Math.abs(receivedAmount - grandTotal);
            returnedAmountId.value = returnAmount;
        }
    }

    calculateReturn.addEventListener("click", calculateReturnValue);

    /**
     * Validate Form Submit
     * */
    function validateFormEntry() {
        const dataset = [];

        if (customerId.value == null)
            dataset.push({
                status: false,
                missing: "Customer Details"
            })

        if (carts.length == 0)
            dataset.push({
                status: false,
                missing: "Products"
            })

        if (receivedAmount == 0 || receivedAmount == null)
            dataset.push({
                status: false,
                missing: "Amount Received"
            })

        if (returnAmount == null)
            dataset.push({
                status: false,
                missing: "Return Amount Not Calculated"
            })
        return dataset;
    }


    /**
     * Submitted Triggered
     * */
    function submitData() {
        const validation = validateFormEntry();
        if (validation.length == 0) {
            let payLoad = [];
            //    invoiceDate, productId, customerId, userId, quantity taxAmount, receivedAmount, returnedAmount
            // Casting Payload
            carts.forEach(item => {
                payLoad.push({
                    invoiceNumber: "{{newInvoiceNumber}}",
                    invoiceDate: new Date(),
                    productId: parseInt(item.productId.id),
                    customerId: parseInt(customerId.value),
                    userId: parseInt(sessionKey.user_id),
                    quantity: parseFloat(item.quantity),
                    taxAmount,
                    receivedAmount,
                    returnedAmount: returnAmount || 0
                })
            });
            // Defining Dataset And Payload
            fetch("/api/sales/bills", {
                headers: {"content-type": "application/json; charset=UTF-8"},
                body: JSON.stringify(payLoad),
                method: "POST"
            }).then(res => res.json())
                    .then(response => {
                        if (response.success)
                            window.location.href = `/redirect/Success/Bills Saved Successfully/bg-success/billing`;
                        else
                            window.location.href = `/redirect/Error/Problem Saving Bills/bg-danger/billing`;
                    })
                    .catch(err => window.location.href = `/redirect/Error/${err}/bg-danger/billing`);
        } else
            validation.forEach(item => {
                notify("Missing", item.missing, null, "bg-danger")
            })
    }

    submitButton.addEventListener("click", submitData);

    /**
     * Fetch Customer
     */
    fetch("/api/customers")
            .then(res => res.json())
            .then(response => {
                if (response.length != 0) response.forEach(customer => customerId.innerHTML += `<option value="${customer.id}">${customer.tpin} , ${customer.address} [${customer.fullName} - ${customer.contactNumber}] </option>`)
            })

    /**
     * Fetch Products
     */
    fetch("/api/WarehouseAndMartProducts")
            .then(res => res.json())
            .then(response => {
                products = response;
                if (response.length != 0) response.forEach(product => addProductId.innerHTML += `<option value="${product.id}">${product.productId.productName} Rs ${product.sellingPrice}/- Available QTY : ${product.availableQuantity}</option>`)
            })


</script>